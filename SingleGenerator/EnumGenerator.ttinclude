<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ output extension="\\" #>
<#@ Assembly Name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>  
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<# 
	string tableName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
  string path = Path.GetDirectoryName(Host.TemplateFile);
	var map = new ExeConfigurationFileMap();
  //Possible source of errors on the next line (the path for the app.config containing the connectionstring for the db):
	map.ExeConfigFilename = this.Host.ResolvePath(@"..\App.config");
	var config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
	var connectionString = config.ConnectionStrings.ConnectionStrings[connectionStringName].ConnectionString;
  //Possible source of errors on the next line (extract connectionstring from EF connectionstring):
	connectionString = connectionString.Substring(connectionString.IndexOf("data source=")).Replace("\"", ""); 
#>
//------------------------------------------------------------------------------
// <auto-generated>
//
// Auto generated code from EnumGenarator.ttinclude.
// The generator is in a _____.tt file.
//
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;

namespace <#= namespaceName #>
{
    public enum <#= tableName #>
    {
<#
    SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1}, {2} from {3} order by {0}", columnId, columnName, columnDescription, tableName);
    SqlCommand comm = new SqlCommand(command, conn);

    conn.Open();

    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();

    while(loop)
    {
#>
		[Description("<#= reader[columnDescription] #>")]
		<#= Pascalize(reader[columnName]) #> = <#= reader[columnId] #><# loop = reader.Read(); #><#= loop ? ",\r\n" : string.Empty #>
<#
    }
#>	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }

    private string GetSubNamespace()
    {
        Regex rx = new Regex(@"(?:.+Services\s)");
        string path = Path.GetDirectoryName(Host.TemplateFile);
        return rx.Replace(path, string.Empty).Replace("\\", ".");
    }
#>
